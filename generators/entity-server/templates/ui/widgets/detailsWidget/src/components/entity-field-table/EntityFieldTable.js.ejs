<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/detailsWidget/src/components/${generator.entityFileName}-field-table/${generator.entityClass}FieldTable.js`" } -%>
<%_
  function convertValue(entityInstance, field, locale) {
    switch (field.fieldType) {
      case 'Boolean':
        return `{typeof ${entityInstance}.${field.fieldName} !== 'undefined' ? ${entityInstance}.${field.fieldName}.toString() : ''}`;
      case 'LocalDate':
        return `{${entityInstance}.${field.fieldName} && new Date(${entityInstance}.${field.fieldName}).toLocaleDateString(language)}`;
      case 'ZonedDateTime':
      case 'Instant':
        return `{${entityInstance}.${field.fieldName} && new Date(${entityInstance}.${field.fieldName}).toLocaleString(language)}`;
    }
    if (field.fieldType === 'byte[]' || field.fieldTypeBlobContent) {
      switch (field.fieldTypeBlobContent) {
        case 'image':
          return `<img src={ \`data:\${${entityInstance}.${field.fieldName + 'ContentType'}};base64, \${${entityInstance}.${field.fieldName}}\`} alt="" />`;
        case 'any':
          return `<a download="filename" href={ \`data:\${${entityInstance}.${field.fieldName + 'ContentType'}};base64, \${${entityInstance}.${field.fieldName}}\`} >{t('common.download')}</a>`;
      }
    }
    return `{${entityInstance}.${field.fieldName}}`;
  }
_%>

import React from 'react';
import PropTypes from 'prop-types';
import { withTranslation } from 'react-i18next';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';

import <%= entityInstance %>Type from 'components/__types__/<%= entityInstance %>';

const <%= entityClass %>FieldTable = ({ t, i18n: { language }, <%= entityInstance %> }) => {
  const translationKeyPrefix = `entities.<%= entityInstance %>.`;

  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableCell>{t('common.name')}</TableCell>
          <TableCell>{t('common.value')}</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        <TableRow>
          <TableCell>
            <span>{t(`${translationKeyPrefix}id`)}</span>
          </TableCell>
          <TableCell>
            <span>{<%= entityInstance %>.id}</span>
          </TableCell>
        </TableRow>
        <%_ fields.forEach(function(field) { _%>
        <TableRow>
          <TableCell>
            <span>{t(`${translationKeyPrefix}<%= field.fieldName %>`)}</span>
          </TableCell>
          <TableCell>
            <span><%- convertValue(entityInstance, field) %></span>
          </TableCell>
        </TableRow>
        <%_ }) _%>
      </TableBody>
    </Table>
  );
};

<%= entityClass %>FieldTable.propTypes = {
  <%= entityInstance %>: <%= entityInstance %>Type,
  t: PropTypes.func.isRequired,
  i18n: PropTypes.shape({
    language: PropTypes.string,
  }).isRequired,
};

<%= entityClass %>FieldTable.defaultProps = {
  <%= entityInstance %>: [],
};

export default withTranslation()(<%= entityClass %>FieldTable);
