<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/tableWidget/src/components/__tests__/${generator.entityClass}TableContainer.test.js`" } -%>
import React from 'react';
import { render, wait } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import <%= entityInstance %>Mocks from 'components/__mocks__/<%= entityInstance %>Mocks';
import <%= entityInstancePlural %>Get from 'api/<%= entityInstancePlural %>';
import 'components/__mocks__/i18nMock';
import <%= entityClass %>TableContainer from 'components/<%= entityClass %>TableContainer';

jest.mock('api/<%= entityInstancePlural %>');

describe('<%= entityClass %>TableContainer', () => {
    const errorMessageKey = 'common.couldNotFetchData';

    it('calls API', async () => {
        <%= entityInstancePlural %>Get.mockImplementation(() => Promise.resolve(<%= entityInstance %>Mocks));
        const { queryByText } = render(<<%= entityClass %>TableContainer />);

        await wait(() => {
            expect(<%= entityInstancePlural %>Get).toHaveBeenCalledTimes(1);
            expect(queryByText(errorMessageKey)).not.toBeInTheDocument();
        });
    });

    it('shows an error if the API call is not successful', async () => {
        const onErrorMock = jest.fn();
        <%= entityInstancePlural %>Get.mockImplementation(() => Promise.reject());
        const { getByText } = render(<<%= entityClass %>TableContainer onError={onErrorMock} />);

        await wait(() => {
            expect(onErrorMock).toHaveBeenCalledTimes(1);
            expect(getByText(errorMessageKey)).toBeInTheDocument();
        });
    });
});
