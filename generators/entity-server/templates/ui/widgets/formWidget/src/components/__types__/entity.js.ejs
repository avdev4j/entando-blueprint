<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/formWidget/src/components/__types__/${generator.entityInstance}.js`" } -%>
<%_
function mapTypeToPropType (field) {
  const checkIfString = ({ fieldType }) => ['String', 'LocalDate', 'Instant', 'ZonedDateTime'].includes(fieldType);
  const checkIfNumber = ({ fieldType }) => ['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType);
  const checkIfBoolean = ({ fieldType }) => ['Boolean'].includes(fieldType);
  const checkIfEnum = ({ fieldIsEnum }) => fieldIsEnum;
  const checkIfBlob = ({ fieldType, fieldTypeBlobContent }) => fieldType === 'byte[]' || fieldTypeBlobContent;

  if (checkIfString(field)) { return 'PropTypes.string' }
  if (checkIfNumber(field)) { return 'PropTypes.number' }
  if (checkIfBoolean(field)) { return 'PropTypes.bool' }
  if (checkIfEnum(field)) { return 'PropTypes.string' }
  if (checkIfBlob(field)) { return 'PropTypes.string' }
  return 'PropTypes.any';
}

function isRequired (field) {
  return field.fieldValidateRules && field.fieldValidateRules.includes('required')
    ? '.isRequired'
    : '';
}
_%>
import PropTypes from 'prop-types';

export default PropTypes.shape({
  id: PropTypes.number,

  <%_ fields.forEach(function(field) { _%>
  <%= field.fieldName %>: <%= mapTypeToPropType(field) %><%= isRequired(field) %>,
  <%_ }) _%>
});

export const formValues = PropTypes.shape({
    // name: PropTypes.string,
    // summary: PropTypes.string,
    // start: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
    // end: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
});

export const formTouched = PropTypes.shape({
  // name: PropTypes.bool,
  // summary: PropTypes.bool,
  // start: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({})]),
  // end: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({})]),
});

export const formErrors = PropTypes.shape({
  // name: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]),
  // summary: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]),
  // start: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]),
  // end: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]),
});
