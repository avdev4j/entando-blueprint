<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/formWidget/src/components/${generator.entityClass}AddFormContainer.js`" } -%>
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { ThemeProvider } from '@material-ui/styles';
import { createMuiTheme } from '@material-ui/core';
import { withTranslation } from 'react-i18next';
import { api<%= entityClass %>Post } from 'api/<%= entityInstancePlural %>';
import <%= entityClass %>Form from 'components/<%= entityClass %>Form';
import Notification from 'components/common/Notification';

<%_ const ComponentName = `${entityClass}AddFormContainer`; _%>
class <%= ComponentName %> extends PureComponent {
  theme = createMuiTheme();

  state = {
    notificationMessage: null,
  };

  constructor(props) {
    super(props);
    this.closeNotification = this.closeNotification.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  closeNotification() {
    this.setState({ notificationMessage: null, notificationStatus: null });
  }

  async handleSubmit(<%= entityInstance %>) {
    const { t } = this.props;
    try {
      const created<%= entityClass %> = await api<%= entityClass %>Post(<%= entityInstance %>);
      const { onCreate } = this.props;
      onCreate(created<%= entityClass %>);

      this.setState({
        notificationMessage: t('common.dataSaved'),
        notificationStatus: 'success',
      });
    } catch (err) {
      this.handleError(err);
    }
  }

  handleError(err) {
    const { onError, t } = this.props;
    onError(err);
    this.setState({
      notificationMessage: t('errors.dataLoading'),
      notificationStatus: 'error',
    });
  }

  render() {
    const { notificationMessage, notificationStatus } = this.state;
    return (
      <ThemeProvider theme={this.theme}>
        <<%= entityClass %>Form onSubmit={this.handleSubmit} />
        <Notification
          variant={notificationStatus}
          message={notificationMessage}
          onClose={this.closeNotification}
        />
      </ThemeProvider>
    );
  }
}

<%= ComponentName %>.propTypes = {
  onError: PropTypes.func,
  onCreate: PropTypes.func,
  t: PropTypes.func.isRequired,
};

<%= ComponentName %>.defaultProps = {
  onError: () => {},
  onCreate: () => {},
};

export default withTranslation()(<%= ComponentName %>);
