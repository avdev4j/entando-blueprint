<%# { "useBluePrint": true, "renameTo": "`/${generator.entityInstance}/formWidget/src/components/${generator.entityClass}Form.js`" } -%>
<%_ include ../../../utils/jhipster _%>
<%_ include ../../../utils/import-mui _%>
<%_ include ../../../utils/mui _%>
<%_ const dependencies = getDependencies(fields); -%>
import React from 'react';
import PropTypes from 'prop-types';
import { withTranslation } from 'react-i18next';
import { withStyles } from '@material-ui/styles';
import Grid from '@material-ui/core/Grid';
import Button from '@material-ui/core/Button';
<%_ for (let dependency of dependencies) { _%>
import <%=
  dependency[1].size > 1
    ? `{ ${Array.from(dependency[1]).join(', ')} }`
    : Array.from(dependency[1])
%> from '<%= dependency[0] %>';
<%_ } _%>
import { withFormik } from 'formik';
import * as yup from 'yup';

import { compose } from 'recompose'; // TODO: REMOVE compose/recompose

import { formValues, formTouched, formErrors } from 'components/__types__/<%= entityInstance %>';

const styles = theme => ({
  root: {
    margin: theme.spacing(3),
  },
  textField: {
    width: '100%',
  },
});

<%_ const ComponentName = `${entityClass}Form`; _%>
const <%= ComponentName %> = props => {
  const {
    classes,
    values,
    touched,
    errors,
    handleChange,
    handleBlur,
    handleSubmit,
    setFieldValue,
    t,
    i18n,
  } = props;

  <%_ if (fieldsContainDate) { _%>
  const handleDateChange = field => value => {
    setFieldValue(field, value);
  };
  <%_ } _%>

  <%_ if (fieldsContainDate && (fieldsContainInstant || fieldsContainZonedDateTime)) { _%>
  const dateTimeLabelFn = date => (date ? new Date(date).toLocaleString(i18n.language) : '');
  <%_ } _%>

  <%_ if (fieldsContainDate && fieldsContainLocalDate) { _%>
  const dateLabelFn = date => (date ? new Date(date).toLocaleDateString(i18n.language) : '');
  <%_ } _%>

  const getHelperText = field => (errors[field] && touched[field] ? errors[field] : '');

  return (
<%# TODO: IS THIS ALWAYS NEEDED? -%>
    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={dateFnsLocales[i18n.language]}>
      <form onSubmit={handleSubmit} className={classes.root}>
        <Grid container spacing={2}>
          <%_ fields.forEach(field => { _%>
          <Grid item xs={12} sm={6}>
            <%_ if (field.fieldType === 'Boolean') { _%>
            <FormControlLabel
              control={
                <Checkbox
                  id="<%= entityInstance %>-<%= field.fieldName %>"
                  name="<%= field.fieldName %>"
                  onChange={handleChange}
                  checked={values.<%= field.fieldName %>}
                  value="<%= entityInstance %>-<%= field.fieldName %>"
                  color="primary"
                />
              }
              label={t('entities.<%= entityInstance %>.<%= field.fieldName %>')}
            />
            <%_ } else if (!field.fieldIsEnum) { _%>
            <<%= getMuiInput(field) %>
              id="<%= entityInstance %>-<%= field.fieldName %>"
              error={errors.name && touched.name}
              helperText={getHelperText('<%= field.fieldName %>')}
              className={classes.textField}
              onBlur={handleBlur}
              value={values.<%= field.fieldName %>}
              name="<%= field.fieldName %>"
              <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(field.fieldType)) { _%>
              onChange={handleDateChange('<%= field.fieldName %>')}
              <%_ } else { _%>
              onChange={handleChange}
              <%_ } _%>
              <%_ if (field.fieldType === 'LocalDate') { _%>
              labelFunc={dateLabelFn}
              <%_ } _%>
              <%_ if (['Instant', 'ZonedDateTime'].includes(field.fieldType)) { _%>
              labelFunc={dateTimeLabelFn}
              <%_ } _%>
              label={t('entities.<%= entityInstance %>.<%= field.fieldName %>')}
            />
            <%_ } else if (field.fieldIsEnum) { _%>
            <%_ const ComponentName = getMuiInput(field); _%>
            <InputLabel htmlFor="<%= entityInstance %>-<%= field.fieldName %>">
              {t('entities.<%= entityInstance %>.<%= field.fieldName %>')}
            </InputLabel>
            <<%= ComponentName %>
              id="<%= entityInstance %>-<%= field.fieldName %>"
              error={errors.name && touched.name}
              className={classes.textField}
              onBlur={handleBlur}
              value={values.<%= field.fieldName %>}
              name="<%= field.fieldName %>"
              onChange={handleChange}
            >
              <%_ field.fieldValues.split(',').forEach(enumValue => { _%>
              <MenuItem value="<%= enumValue %>"><%= enumValue %></MenuItem>
              <%_ }) _%>
            </<%= ComponentName %>>
            <%_ } _%>
          </Grid>
          <%_ }) _%>
          <Button type="submit" color="primary" data-testid="submit-btn">
            {t('common.save')}
          </Button>
        </Grid>
      </form>
    </MuiPickersUtilsProvider>
  );
};

<%= ComponentName %>.propTypes = {
  classes: PropTypes.shape({
    root: PropTypes.string,
    textField: PropTypes.string,
    submitButton: PropTypes.string,
  }),
  values: formValues,
  touched: formTouched,
  errors: formErrors,
  handleChange: PropTypes.func.isRequired,
  handleBlur: PropTypes.func.isRequired,
  handleSubmit: PropTypes.func.isRequired,
  setFieldValue: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  i18n: PropTypes.shape({ language: PropTypes.string }).isRequired,
};

<%= ComponentName %>.defaultProps = {
  classes: {},
  values: {},
  touched: {},
  errors: {},
};

const empty<%= entityClass %> = {
  <%_ fields.forEach(field => { _%>
  <%_ if (['String', 'Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(field.fieldType)) { _%>
  <%= field.fieldName %>: '',
  <%_ } else { _%>
  <%_ if (['Boolean'].includes(field.fieldType)) { _%>
  <%= field.fieldName %>: false,
  <%_ } else { _%>
  <%_ if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(field.fieldType)) { _%>
  <%= field.fieldName %>: null,
  <%_ } else { _%>
  <%= field.fieldName %>: '',
  <%_ } } } _%>
  <%_ }) _%>
};

<%_ include ../../../utils/yup _%>
<%_ const yupValues = getYupValues(fields); _%>
const validationSchema = yup.object().shape({
  <%_ yupValues.forEach(yupField => { _%>
  <%= yupField %>
  <%_ }) _%>
});

const formikBag = {
  mapPropsToValues: ({ <%= entityInstance %> }) => <%= entityInstance %> || empty<%= entityClass %>,

  enableReinitialize: true,

  validationSchema,

  handleSubmit: (values, { props: { onSubmit } }) => {
    onSubmit(values);
  },

  displayName: '<%= ComponentName %>',
};
<%# // TODO: REMOVE compose/recompose %>
export default compose(
  withStyles(styles, { withTheme: true }),
  withTranslation(),
  withFormik(formikBag)
)(<%= ComponentName %>);
