#!/bin/bash

#This command assumes that the widgets are all under ui/widgets/<entity>/<widget>. The command finds all of the micro-frontends in those folders and copies the result of the build into the bundle resources folder so that the bundle can be deployed to a digital exchange instance (or imported on an existing page)

find ui/widgets -maxdepth 2 -mindepth 2 -type d -not -path "*utils*" -exec bash -c "mkdir -p bundle/'{}'/resources/{js,css} && cp '{}'/build/static/js/*.js bundle/'{}'/resources/js && cp '{}'/build/static/css/*.css bundle/'{}'/resources/css && cp '{}'/bundle/* bundle/{}/" \;

#Fetch the top level service name from the pom and use this as the context directory for the publishing of assets specific to the project when building the bundle
artifactId=`cat pom.xml | grep "^    <artifactId>.*</artifactId>$" | awk -F'[><]' '{print $3}'`

echo "Generating bundle for service ${artifactId}"

#For each widget under the structure ui/widgets/<entity>/<widget> generate an FTL file that imports the css and js that goes with that widget
for dir in `find bundle/ui/widgets -maxdepth 2 -mindepth 2 -type d -not -path "*utils*" -exec bash -c "cd {} && pwd" \;`;
do
    for ftlFile in `ls $dir/*.ftl`;
    do
        echo "Adding js and css build files to ${ftlFile}"
        for jsfile in `ls $dir/resources/js`;
        do
            widgetName=`basename $dir`
            echo "Adding script to js for widget ${widgetName} for file ${jsfile}"
            echo "<script src=\"<@wp.resourceURL />${artifactId}/static/js/${jsfile}\"></script>"$'\n'"$(cat $ftlFile)" > $ftlFile
        done

        for cssfile in `ls $dir/resources/css`;
        do
          echo "Adding link to css file for widget for file ${cssfile}"
          echo "<link href=\"<@wp.resourceURL />${artifactId}/static/css/${cssfile}\" rel=\"stylesheet\">"$'\n'"$(cat $ftlFile)" > $ftlFile
        done
    done
done
