<% 
    const configClassName =  `${baseName.charAt(0).toUpperCase() + baseName.substring(1)}Config`;
    const schemaResourceClassName = `${configClassName}SchemaResource`
%>

package <%=packageName%>.web.rest.schema;

import <%=packageName%>.config.<%=configClassName%>;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kjetland.jackson.jsonSchema.JsonSchemaGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/api/schemas/application")
public class <%=schemaResourceClassName%> {

    private final Logger log = LoggerFactory.getLogger(<%=schemaResourceClassName%>.class);

    @GetMapping(produces = "application/schema+json")
    public String getJsonSchemaFormConfiguration() throws Exception {

        ObjectMapper objectMapper = new ObjectMapper();
        JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator(objectMapper);

        JsonNode jsonSchema = jsonSchemaGenerator.generateJsonSchema(<%=configClassName%>.class);

        return objectMapper.writeValueAsString(jsonSchema);
    }
}